{"version":3,"sources":["layouts/HeaderBar.jsx","layouts/PageLayout.jsx","reducers/gridReducer.js","contexts/GridContext.jsx","components/SudokuGrid.jsx","App.jsx","serviceWorker.js","index.js"],"names":["HeaderBar","Header","inverted","as","floated","Content","Button","style","background","border","padding","margin","marginRight","color","onClick","window","location","reload","Icon","name","circular","PageLayout","children","SegmentGroup","raised","Segment","clearing","reducer","state","action","type","map","row","rIndex","cell","cIndex","value","GridContext","React","createContext","values","Array","solve","Function","INITIAL","GridProvider","useReducer","setValues","updateGrid","col","callback","timeout","setTimeout","withTimeout","getCellPossibilites","matrix","cellRow","cellCol","possibilites","column","filter","possibility","length","colStart","rowStart","getMinimumPossibilityCell","minimumCell","rowIndex","colIndex","possibilities","isAllFilled","sleep","ms","Promise","resolve","backtrack","a","copyMatrix","Provider","borderModulo","index","modulo","SudokuGrid","useContext","useEffect","key","toString","display","justifyContent","flexDirection","textAlign","borderWidth","borderLeft","borderTop","borderColor","borderStyle","height","width","alignItems","fontColor","App","x","Math","floor","random","y","z","bgColor","document","body","randomBgColor","className","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTA2BeA,EAxBG,WAChB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,GAAG,KAAKC,QAAQ,QAC/B,kBAACH,EAAA,EAAOI,QAAR,KACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,WAAY,cACZC,OAAQ,EACRC,QAAS,EACTC,OAAQ,EACRC,YAAa,EACbC,MAAO,SAETC,QAAS,kBAAMC,OAAOC,SAASC,QAAO,KAEtC,kBAACC,EAAA,EAAD,CAAMC,KAAK,OAAOC,UAAQ,KAE5B,mDCHKC,EAbI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,kBAACC,EAAA,EAAD,CAAcC,QAAM,GAClB,kBAACC,EAAA,EAAD,CAASC,UAAQ,EAACxB,UAAQ,GACxB,kBAAC,EAAD,OAEF,kBAACuB,EAAA,EAAD,CAASlB,MAAO,CAAEG,QAAS,IACzB,6BAAMY,M,mDCXG,SAASK,EAAQC,EAAOC,GACrC,OAAQA,EAAOC,MACb,IAAK,MACH,OAAOF,EAAMG,KAAI,SAACC,EAAKC,GACrB,OAAIJ,EAAOI,SAAWA,EACbD,EAAID,KAAI,SAACG,EAAMC,GACpB,OAAIN,EAAOM,SAAWA,EACbN,EAAOO,MAETF,KAGJF,KAEX,QACE,OAAOJ,GCZb,IAAMS,EAAcC,IAAMC,cAAc,CACtCC,OAAQC,MACRC,MAAOC,WAEMN,IACTO,EAAU,CACd,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpB,SAASC,EAAT,GAAqC,IAAbvB,EAAY,EAAZA,SAAY,EACbgB,IAAMQ,WAAWnB,EAASiB,GADb,mBAClCJ,EADkC,KAC1BO,EAD0B,KAGnCC,EAAa,SAAChB,EAAKiB,EAAKb,GAAX,OAKnB,SAAqBc,GAA0B,IAAhBC,EAAe,uDAAL,IACvCC,YAAW,WACTF,MACCC,GAPHE,EAAY,kBACVN,EAAU,CAAEjB,KAAM,MAAOM,QAAOD,OAAQc,EAAKhB,OAAQD,QASzD,SAASsB,EAAoBC,EAAQC,EAASC,GAG5C,IAFA,IAAIC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GADS,WAG5CC,GACP,IAAMvB,EAAQmB,EAAOC,GAASG,GAC9BD,EAAeA,EAAaE,QAC1B,SAACC,GAAD,OAAiBA,IAAgBzB,MAH5BuB,EAAS,EAAGA,EAASJ,EAAOO,OAAQH,IAAW,EAA/CA,GAOT,IAVqD,IAkBjDI,EACAC,EAnBiD,WAU5ChC,GACP,IAAMI,EAAQmB,EAAOvB,GAAKyB,GAC1BC,EAAeA,EAAaE,QAC1B,SAACC,GAAD,OAAiBA,IAAgBzB,MAH5BJ,EAAM,EAAGA,EAAMuB,EAAOO,OAAQ9B,IAAQ,EAAtCA,GAWP+B,EADEN,EAAU,EACD,EACFA,EAAU,EACR,EAEA,EASb,IAAK,IAAIzB,EANPgC,EADER,EAAU,EACD,EACFA,EAAU,EACR,EAEA,EAEYxB,EAAMgC,EAAW,EAAGhC,IAC3C,IADmD,IAAD,WACzC2B,GACP,IAAMvB,EAAQmB,EAAOvB,GAAK2B,GAC1BD,EAAeA,EAAaE,QAC1B,SAACC,GAAD,OAAiBA,IAAgBzB,MAH5BuB,EAASI,EAAUJ,EAASI,EAAW,EAAGJ,IAAW,EAArDA,GAOX,OAAOD,EAGT,SAASO,EAA0BV,GAGjC,IAFA,IAAIW,EAAc,KAETC,EAAW,EAAGA,EAAWZ,EAAOO,OAAQK,IAG/C,IAFA,IAAMnC,EAAMuB,EAAOY,GAEVC,EAAW,EAAGA,EAAWpC,EAAI8B,OAAQM,IAAY,CAExD,GAAc,IADApC,EAAIoC,GAClB,CAEA,IAAMC,EAAgBf,EAAoBC,EAAQY,EAAUC,GAC/B,IAAzBC,EAAcP,SACE,OAAhBI,GAMOA,EAAYG,cAAcP,OAASO,EAAcP,UAL1DI,EAAc,CACZlC,IAAKmC,EACLlB,IAAKmB,EACLC,cAAc,YAAKA,MAW3B,OAAOH,EAGT,SAASI,EAAYf,GACnB,IAAK,IAAIvB,EAAM,EAAGA,EAAMuB,EAAOO,OAAQ9B,IACrC,IAAK,IAAIiB,EAAM,EAAGA,EAAMM,EAAOO,OAAQb,IAAO,CAE5C,GAAc,IADAM,EAAOvB,GAAKiB,GACT,OAAO,EAG5B,OAAO,EAGT,SAASsB,IAAe,IAATC,EAAQ,uDAAH,EAClB,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAatB,WAAWsB,EAASF,MApGb,SAuG1BG,EAvG0B,8EAuGzC,WAAyBpB,GAAzB,qBAAAqB,EAAA,0DACoBN,EAAYf,GADhC,0CAEwB,GAFxB,UAOe,QAHPrB,EAAO+B,EAA0BV,IAJzC,0CAQW,GARX,UAUoC,IAA9BrB,EAAKmC,cAAcP,OAVzB,wBAYId,EAAWd,EAAKF,IAAKE,EAAKe,IAAKf,EAAKmC,cAAc,IAClDd,EAAOrB,EAAKF,KAAKE,EAAKe,KAAOf,EAAKmC,cAAc,GAbpD,UAcUE,IAdV,yBAiByBI,EAAUpB,GAjBnC,YAkBmB,IAlBnB,+BAmBMP,EAAWd,EAAKF,IAAKE,EAAKe,IAAK,GAC/BM,EAAOrB,EAAKF,KAAKE,EAAKe,KAAO,EApBnC,UAqBYsB,IArBZ,kCAsBa,GAtBb,kCAwBW,GAxBX,aA0BMrC,EAAKmC,cAAcP,OAAS,GA1BlC,+BA2B8B5B,EAAKmC,eA3BnC,kEA2BeR,EA3Bf,QA6BMb,EAAWd,EAAKF,IAAKE,EAAKe,IAAKY,GAC/BN,EAAOrB,EAAKF,KAAKE,EAAKe,KAAOY,EA9BnC,UA+BYU,IA/BZ,yBAiC2BI,EAAUpB,GAjCrC,YAkCqB,IAlCrB,+BAmCQP,EAAWd,EAAKF,IAAKE,EAAKe,IAAK,GAC/BM,EAAOrB,EAAKF,KAAKE,EAAKe,KAAO,EApCrC,UAqCcsB,IArCd,yEAwCe,GAxCf,2KA4CW,GA5CX,kEAvGyC,kEAuJzC,4BAAAK,EAAA,6DAEE7B,EAAUH,GACJiC,EAAarC,EAAOT,KAAI,SAACC,GAAD,mBAAaA,MAH7C,SAKQ2C,EAAUE,GALlB,4CAvJyC,sBA+JzC,OACE,kBAACxC,EAAYyC,SAAb,CAAsB1C,MAAO,CAAEI,SAAQE,MAAO,kBAhKP,0CAgKaA,MACjDpB,GCjLP,IAIMyD,EAAe,SAACC,GAAD,IAAQC,EAAR,uDAJD,EAIC,OACjBD,EAAQC,EAHU,EADD,GAMN,SAASC,IAAc,IAAD,EACT5C,IAAM6C,WAAW9C,GAAnCG,EAD2B,EAC3BA,OAAQE,EADmB,EACnBA,MAMhB,OAJAJ,IAAM8C,WAAU,WACd1C,MACC,IAEIF,EAAOT,KAAI,SAACC,EAAKC,GAAN,OAChB,yBACEoD,IAAG,UAAKpD,EAAL,YAAeD,EAAIsD,YACtB/E,MAAO,CACLgF,QAAS,OACTC,eAAgB,SAChBC,cAAe,QAGhBzD,EAAID,KAAI,SAACG,EAAMC,GAAP,OACP,yBACEkD,IAAG,UAAKpD,EAAL,YAAeE,EAAf,YAAyBD,EAAKoD,YACjC/E,MAAO,CACLmF,UAAW,SACXC,YAAa,EACbC,WAAYb,EAAa5C,GACzB0D,UAAWd,EAAa9C,GACxB6D,YAAa,OACbC,YAAa,QACbC,OAAQ,GACRC,MAAO,GACPV,QAAS,OACTC,eAAgB,SAChBU,WAAY,WAGd,0BAAM3F,MAAO,CAAE4F,UAAW,UAAYjE,GAAQ,QAGlD,iCCvCN,IA0BekE,EA1BH,WAaV,OAHA9D,IAAM8C,WAAU,YAThB,WACE,IAAMiB,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBG,EAAO,cAAUN,EAAV,YAAeI,EAAf,YAAoBC,EAApB,KAEbE,SAASC,KAAKtG,MAAMC,WAAamG,EAIjCG,KACC,IAED,yBAAKC,UAAU,OACb,yBAAKxG,MAAO,CAAEgF,QAAS,iBACrB,kBAAC1C,EAAD,KACE,kBAAC,EAAD,KACE,kBAACqC,EAAD,WCbQ8B,QACW,cAA7BjG,OAAOC,SAASiG,UAEe,UAA7BlG,OAAOC,SAASiG,UAEhBlG,OAAOC,SAASiG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b95aecd3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Icon, Header } from \"semantic-ui-react\";\n\nconst HeaderBar = () => {\n  return (\n    <div>\n      <Header inverted as=\"h5\" floated=\"left\">\n        <Header.Content>\n          <Button\n            style={{\n              background: \"transparent\",\n              border: 0,\n              padding: 0,\n              margin: 0,\n              marginRight: 5,\n              color: \"white\",\n            }}\n            onClick={() => window.location.reload(false)}\n          >\n            <Icon name=\"redo\" circular />\n          </Button>\n          <span>Sudoku Solver</span>\n        </Header.Content>\n      </Header>\n    </div>\n  );\n};\nexport default HeaderBar;\n","import PropTypes from \"prop-types\";\nimport { Segment, SegmentGroup } from \"semantic-ui-react\";\nimport React from \"react\";\nimport HeaderBar from \"./HeaderBar\";\n\nconst PageLayout = ({ children }) => (\n  <SegmentGroup raised>\n    <Segment clearing inverted>\n      <HeaderBar />\n    </Segment>\n    <Segment style={{ padding: 0 }}>\n      <div>{children}</div>\n    </Segment>\n  </SegmentGroup>\n);\nPageLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default PageLayout;\n","export default function reducer(state, action) {\n  switch (action.type) {\n    case \"SET\":\n      return state.map((row, rIndex) => {\n        if (action.rIndex === rIndex) {\n          return row.map((cell, cIndex) => {\n            if (action.cIndex === cIndex) {\n              return action.value;\n            }\n            return cell;\n          });\n        }\n        return row;\n      });\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport reducer from \"../reducers/gridReducer\";\n\nconst GridContext = React.createContext({\n  values: Array,\n  solve: Function,\n});\nexport default GridContext;\nconst INITIAL = [\n  [3, 0, 6, 5, 0, 8, 4, 0, 0],\n  [5, 2, 0, 0, 0, 0, 0, 0, 0],\n  [0, 8, 7, 0, 0, 0, 0, 3, 1],\n  [0, 0, 3, 0, 1, 0, 0, 8, 0],\n  [9, 0, 0, 8, 6, 3, 0, 0, 5],\n  [0, 5, 0, 0, 9, 0, 6, 0, 0],\n  [1, 3, 0, 0, 0, 0, 2, 5, 0],\n  [0, 0, 0, 0, 0, 0, 0, 7, 4],\n  [0, 0, 5, 2, 0, 6, 3, 0, 0],\n];\nexport function GridProvider({ children }) {\n  const [values, setValues] = React.useReducer(reducer, INITIAL);\n\n  const updateGrid = (row, col, value) =>\n    withTimeout(() =>\n      setValues({ type: \"SET\", value, cIndex: col, rIndex: row })\n    );\n\n  function withTimeout(callback, timeout = 500) {\n    setTimeout(() => {\n      callback();\n    }, timeout);\n  }\n\n  function getCellPossibilites(matrix, cellRow, cellCol) {\n    let possibilites = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    // check row\n    for (let column = 0; column < matrix.length; column++) {\n      const value = matrix[cellRow][column];\n      possibilites = possibilites.filter(\n        (possibility) => possibility !== value\n      );\n    }\n    // check column\n    for (let row = 0; row < matrix.length; row++) {\n      const value = matrix[row][cellCol];\n      possibilites = possibilites.filter(\n        (possibility) => possibility !== value\n      );\n    }\n\n    // check square\n    let colStart;\n    let rowStart;\n    if (cellCol < 3) {\n      colStart = 0;\n    } else if (cellCol < 6) {\n      colStart = 3;\n    } else {\n      colStart = 6;\n    }\n    if (cellRow < 3) {\n      rowStart = 0;\n    } else if (cellRow < 6) {\n      rowStart = 3;\n    } else {\n      rowStart = 6;\n    }\n    for (let row = rowStart; row < rowStart + 3; row++) {\n      for (let column = colStart; column < colStart + 3; column++) {\n        const value = matrix[row][column];\n        possibilites = possibilites.filter(\n          (possibility) => possibility !== value\n        );\n      }\n    }\n    return possibilites;\n  }\n\n  function getMinimumPossibilityCell(matrix) {\n    let minimumCell = null;\n    // go over rows\n    for (let rowIndex = 0; rowIndex < matrix.length; rowIndex++) {\n      const row = matrix[rowIndex];\n      // go over values\n      for (let colIndex = 0; colIndex < row.length; colIndex++) {\n        const value = row[colIndex];\n        if (value !== 0) continue;\n\n        const possibilities = getCellPossibilites(matrix, rowIndex, colIndex);\n        if (possibilities.length === 0) continue;\n        if (minimumCell === null) {\n          minimumCell = {\n            row: rowIndex,\n            col: colIndex,\n            possibilities: [...possibilities],\n          };\n        } else if (minimumCell.possibilities.length > possibilities.length) {\n          minimumCell = {\n            row: rowIndex,\n            col: colIndex,\n            possibilities: [...possibilities],\n          };\n        }\n      }\n    }\n    return minimumCell;\n  }\n\n  function isAllFilled(matrix) {\n    for (let row = 0; row < matrix.length; row++) {\n      for (let col = 0; col < matrix.length; col++) {\n        const value = matrix[row][col];\n        if (value === 0) return false;\n      }\n    }\n    return true;\n  }\n\n  function sleep(ms = 0) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async function backtrack(matrix) {\n    const allFilled = isAllFilled(matrix);\n    if (allFilled) return true;\n\n    const cell = getMinimumPossibilityCell(matrix);\n\n    // success\n    if (cell === null) {\n      return false;\n    }\n    if (cell.possibilities.length === 1) {\n      // fill cell with the possibility\n      updateGrid(cell.row, cell.col, cell.possibilities[0]);\n      matrix[cell.row][cell.col] = cell.possibilities[0];\n      await sleep();\n\n      //backtrack with changed matrix\n      const result = await backtrack(matrix);\n      if (result === false) {\n        updateGrid(cell.row, cell.col, 0);\n        matrix[cell.row][cell.col] = 0;\n        await sleep();\n        return false;\n      }\n      return true;\n    }\n    if (cell.possibilities.length > 1) {\n      for (const possibility of cell.possibilities) {\n        // fill cell with the possibility\n        updateGrid(cell.row, cell.col, possibility);\n        matrix[cell.row][cell.col] = possibility;\n        await sleep();\n        //backtrack with changed matrix\n        const result = await backtrack(matrix);\n        if (result === false) {\n          updateGrid(cell.row, cell.col, 0);\n          matrix[cell.row][cell.col] = 0;\n          await sleep();\n          continue;\n        } else {\n          return true;\n        }\n      }\n      // if we got here it means none of the possibilites didnt work\n      return false;\n    }\n  }\n\n  async function solve() {\n    // reset values\n    setValues(INITIAL);\n    const copyMatrix = values.map((row) => [...row]);\n    // true for success, false for not possible\n    await backtrack(copyMatrix);\n  }\n\n  return (\n    <GridContext.Provider value={{ values, solve: () => solve() }}>\n      {children}\n    </GridContext.Provider>\n  );\n}\n\n","import React from \"react\";\nimport GridContext from \"../contexts/GridContext\";\n\nconst GRID_MODULO = 3;\nconst THICK_BORDER = 2;\nconst NORMAL_BORDER = 1;\n\nconst borderModulo = (index, modulo = GRID_MODULO) =>\n  !(index % modulo) ? THICK_BORDER : NORMAL_BORDER;\n\nexport default function SudokuGrid() {\n  const { values, solve } = React.useContext(GridContext);\n\n  React.useEffect(() => {\n    solve();\n  }, []);\n\n  return values.map((row, rIndex) => (\n    <div\n      key={`${rIndex}+${row.toString()}`}\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"row\",\n      }}\n    >\n      {row.map((cell, cIndex) => (\n        <div\n          key={`${rIndex}+${cIndex}+${cell.toString()}`}\n          style={{\n            textAlign: \"center\",\n            borderWidth: 1,\n            borderLeft: borderModulo(cIndex),\n            borderTop: borderModulo(rIndex),\n            borderColor: \"grey\",\n            borderStyle: \"solid\",\n            height: 40,\n            width: 40,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <span style={{ fontColor: \"black\" }}>{cell || \"\"}</span>\n        </div>\n      ))}\n      <br />\n    </div>\n  ));\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport PageLayout from \"./layouts/PageLayout\";\nimport SudokuGrid from \"./components/SudokuGrid\";\nimport { GridProvider } from \"./contexts/GridContext\";\n\nconst App = () => {\n  function randomBgColor() {\n    const x = Math.floor(Math.random() * 20);\n    const y = Math.floor(Math.random() * 200);\n    const z = Math.floor(Math.random() * 256);\n    const bgColor = `rgb(${x},${y},${z})`;\n\n    document.body.style.background = bgColor;\n  }\n\n  React.useEffect(() => {\n    randomBgColor();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"inline-block\" }}>\n        <GridProvider>\n          <PageLayout>\n            <SudokuGrid />\n          </PageLayout>\n        </GridProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}